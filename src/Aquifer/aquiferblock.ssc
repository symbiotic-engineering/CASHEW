component aquiferblock
% Flow Resistance (2P) : 1.5
% This block represents a generic pressure loss in a two-phase fluid
% network. The drop in pressure is proportional to the square of the mass
% flow rate and to the specific volume. The proportionality constant is
% determined from the specified nominal condition. Set Nominal specific
% volume to zero to omit the density dependence.

% Copyright 2017-2023 The MathWorks, Inc.

nodes
    A = foundation.two_phase_fluid.two_phase_fluid; % A:left
    B = foundation.two_phase_fluid.two_phase_fluid; % B:right
end

parameters
    K              = {3e-12, 'm^2'   }; 
    mu             = {6e-5,   'Pa*s'  }; 
    h              = {3e2,     'm'}; 
    area           = {5e6 'm^2'}; 
end


% Parameter checks
equations
    assert(K > 0)
    assert(mu > 0)
    assert(h > 0)
    assert(area > 0)
end

variables (Access = protected)
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
end

intermediates (Access = private, ExternalAccess = none)
    % Port pressure
    p_A = A.p;
    p_B = B.p;

    % Normalized internal energy for inflow
    unorm_A_in = foundation.two_phase_fluid.normalized_internal_energy(A.u, p_A, ...
        A.u_min, A.u_max, A.p_TLU, A.u_sat_liq_TLU, A.u_sat_vap_TLU);
    unorm_B_in = foundation.two_phase_fluid.normalized_internal_energy(B.u, p_B, ...
        A.u_min, A.u_max, A.p_TLU, A.u_sat_liq_TLU, A.u_sat_vap_TLU);

    % Specific volume for inflow
    v_A_in = tablelookup(A.unorm_TLU, A.p_TLU, A.v_TLU, unorm_A_in, p_A, interpolation = linear, extrapolation = nearest);
    v_B_in = tablelookup(A.unorm_TLU, A.p_TLU, A.v_TLU, unorm_B_in, p_B, interpolation = linear, extrapolation = nearest);
    v_avg = (v_A_in + v_B_in)/2;

    Q = mdot_A * v_avg;

end

equations
    
    p_A - p_B == (Q * mu) / (K*h );
  
    % Mass balance
    mdot_A + mdot_B == 0;

    % Energy balance
    Phi_A + Phi_B == 0;

    % Run-time variable checks
    assert(A.p >= A.p_min, message('physmod:simscape:library:two_phase_fluid:PressureMinValid', 'A'), Action = A.properties_range_check)
    assert(A.p <= A.p_max, message('physmod:simscape:library:two_phase_fluid:PressureMaxValid', 'A'), Action = A.properties_range_check)
    assert(A.u >= A.u_min, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMinValid', 'A'), Action = A.properties_range_check)
    assert(A.u <= A.u_max, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMaxValid', 'A'), Action = A.properties_range_check)
    assert(B.p >= B.p_min, message('physmod:simscape:library:two_phase_fluid:PressureMinValid', 'B'), Action = B.properties_range_check)
    assert(B.p <= B.p_max, message('physmod:simscape:library:two_phase_fluid:PressureMaxValid', 'B'), Action = B.properties_range_check)
    assert(B.u >= B.u_min, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMinValid', 'B'), Action = B.properties_range_check)
    assert(B.u <= B.u_max, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMaxValid', 'B'), Action = B.properties_range_check)
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess = none)
    convection_A = foundation.two_phase_fluid.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
    convection_B = foundation.two_phase_fluid.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
end
connections
    connect(A, convection_A.port)
    connect(B, convection_B.port)
end

% Equate variables for internal components that calculate energy convection at ports A and B
equations
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_B.mdot == mdot_B;
    convection_B.Phi  == Phi_B;

    convection_A.ht_I == convection_B.ht_I;
end

end
